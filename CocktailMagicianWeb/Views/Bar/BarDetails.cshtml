@model BarViewModel
@{
    ViewData["Title"] = "BarDetails";
    <style>

        body {
            background-image: url('../../images/37f072eb4f9453169d16478007277a1d.jpg');
            background-size: cover;
        }

        img {
            max-width: 100%;
            height: auto;
        }

        .BackgroundOpacity {
            border-radius: 16px;
            background-color: rgba(255,250,250,0.7);
            padding: 35px 35px;
            margin: 20px;
        }

        table {
            border-collapse: collapse;
            width: 100%;
        }

        tr {
            background-color: #f2f2f2
        }

        th {
            background-color: #ff0000;
            color: white;
        }

        .buttonReview {
            background: #ff0000;
            margin: 5px;
            width: 80%;
            color: white;
        }

        .margingaps {
            margin: 5px;
        }

        .barDesc {
            background-color: #ff0000;
            color: white;
        }

        h2 {
            margin-top: 50px;
            margin-left: 20px;
            font-size: 50px;
        }

        .modal-header {
            height: 80px;
            margin: 0;
        }

        /*.directionsIcons {
            margin: 0;
            height: inherit;
            display: inline-block;
        }*/
        #active-travel-mode {
            font-size: 48px;
            color: white;
            background-color: #dc3545;
            height: auto;
            padding: 3px;
            width: 20%;
            text-align: center;
            border-radius: 5px;
        }

        .fas {
            font-size: 48px;
            color: black;
            margin: 0;
            height: auto;
            padding: 3px;
            width: 20%;
            text-align: center;
            border-radius: 5px;
        }

            .fas:hover {
                font-size: 48px;
                color: white;
                background-color: rgba(220, 53, 69, 0.7);
            }

        .defaultMap {
            background-image: url("https://cdn1.iconfinder.com/data/icons/location-28/512/Untitled-67-512.png");
            background-size: cover;
        }
    </style>
    <script src='https://kit.fontawesome.com/a076d05399.js'></script>

    <link href="~/css/BarDetailsGrid.css" rel="stylesheet" />
}
<h2 class="cola">Bar Details</h2>
<div class="grid-container">
    <div class="desctipion BackgroundOpacity">
        <div class="picture margingaps">
            @if (Model.CurrentPicture != null)
            {
                <img src="data:image/jpg;base64,@(Html.Raw(Convert.ToBase64String(Model.CurrentPicture)))" width="500" height="390" />

            }
            else
            {
                <img src="~/images/no-image-icon-6.png" width="230" height="172" />
            }
        </div>
        <div class="cocktails margingaps">
            <table class="table table">
                <th>Cocktails</th>
                <tr id="cocktailsTable">
                    <td id="InputCocktails">
                        @foreach (var cocktails in Model.Cocktails)
                        {
                            <p class="hakunaMatata">
                                @cocktails
                            </p>
                        }
                    </td>

                </tr>
            </table>
            @if (Model.Cocktails.Count == 10)
            {
                <button id="load-more-cocktails" data-id="@Model.Id">Load More</button>
            }

        </div>

        <div class="googlemaps" id="googlemaps" data-lat="@Model.Lat" data-lng="@Model.Long">

        </div>

        <div class="info margingaps">
            <table class="table table">
                @if (Model != null)
                {
                    <tr>
                        <td class="barDesc">Name:</td>
                        <td>
                            @Model.Name
                        </td>
                    </tr>
                    <tr>
                        <td class="barDesc">Adress:</td>
                        <td>
                            @Model.Address
                        </td>

                    </tr>
                    <tr>
                        <td class="barDesc">Phone Number:</td>
                        <td>
                            @Model.PhoneNumber
                        </td>
                    </tr>
                    <tr>
                        <td class="barDesc">Rated:</td>
                        <td>@Model.Rating</td>
                    </tr>
                }
            </table>
        </div>
        <div class="buttons">

            <button class="btn buttonReview" color:white" id="Load-Bars-Reviews" data-bar="@Model.Id">Load Reviews</button>
            @if (User.IsInRole("BarCrawler") || User.IsInRole("CocktailMagician"))
            {
                <button class="btn buttonReview" color:white" onclick="location.href='@Url.Action("LeaveBarReview", "Reviews", new { Id = Model.Id })'">Leave Review</button>
            }
        </div>
        <button class="btn buttonReview" id="createEvent" data-url="/Bar/GetBarEventPartial/@Model.Id">Create Event</button>
        <button class="btn getDirectionsBtn buttonReview" type="button" data-lat="@Model.Lat" data-lng="@Model.Long">Get Directions</button>
    </div>
    <div id="commentBox" class="comments">

    </div>
</div>

<div class="modal fade" id="directionsMapModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="width:100%;">
                <i class='fas fa-car-alt travelModeIcon' id="active-travel-mode" data-mode="DRIVING"></i>
                <i class='fas fa-bicycle travelModeIcon' data-mode="BICYCLING"></i>
                <i class='fas fa-bus-alt travelModeIcon' data-mode="TRANSIT"></i>
                <i class='fas fa-walking travelModeIcon' data-mode="WALKING"></i>
            </div>
            <div class="modal-body" id="modal-body" style="max-height:70%; height:500px;">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal" id="closeModalBtn">Close</button>
            </div>
        </div>
    </div>
</div>



<div class="modal fade" id="barEventForm">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
            </div>
            <div class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal" id="closeInvitationModalBtn">Close</button>
            </div>
        </div>
    </div>
</div>
@section Scripts{


    <script>
        var map;
        var lat;
        var lng;
        var image;

        function initMap() {

            var mapElements = document.getElementById('googlemaps');
            var lat;
            var lng;

            const directionService = new google.maps.DirectionsService();
            const directionDisplay = new google.maps.DirectionsRenderer();



            lat = mapElements.dataset.lat;
            lng = mapElements.dataset.lng;

            if (lat == 0 || lng == 0) {
                mapElements.className = 'defaultMap';
                return;
            }

            var coordinates = new google.maps.LatLng(lat, lng);

            map = new google.maps.Map(mapElements, {
                zoom: 16,
                center: coordinates,
            });

            var markerSetup =
            {
                coords: coordinates,
                iconImage: image,
                content: false,
            };
            addMarker(markerSetup);


            function addMarker(props) {
                var marker = new google.maps.Marker({
                    position: props.coords,
                    map: map,
                });
                if (props.iconImage) {

                    marker.setIcon(props.iconImage);
                }

                if (props.content) {
                    var infoWindow = new google.maps.InfoWindow({
                        content: props.content
                    });
                }
            }

        }

        function initDirections(lat, lng, travelMode) {
            debugger;
            var modal = document.getElementById('directionsMapModal');
            const defaultTravelMode = 'DRIVING';

            if (typeof travelMode === "undefined" || travelMode === null) {
                travelMode = defaultTravelMode;
            }

            if (typeof lng === "undefined" || lng === null) {
                lng = modal.getAttribute('data-lng');
            }

            if (typeof lat === "undefined" || lat === null) {
                lng = modal.getAttribute('data-lat');
            }
            debugger;
            console.log(travelMode);
            const directionService = new google.maps.DirectionsService();
            const directionDisplay = new google.maps.DirectionsRenderer();
            var newCoordinates = [];
            var currentCoordinates = [];

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    newCoordinates = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    currentCoordinates = {
                        lat: parseFloat(lat),
                        lng: parseFloat(lng)
                    };


                    var request = {
                        origin: newCoordinates,
                        destination: currentCoordinates,
                        travelMode: travelMode
                    };


                    var modalBody = document.getElementById('modal-body');
                    var newMap = new google.maps.Map(modalBody, {
                        zoom: 30,
                        center: currentCoordinates,
                    });
                    directionDisplay.setMap(newMap)
                    directionService.route(request, (result, status) => {
                        if (status == 'OK') {

                            directionDisplay.setDirections(result);
                        }
                        if (status != 'OK' && travelMode == 'DRIVING') {
                            debugger;
                            return;
                        }
                        if (status == 'OK' || travelMode == 'DRIVING') {

                            debugger;
                            return;
                        }
                        else {
                            debugger;
                            toastr.error(`No suitable ${travelMode} routes were found for this direction\nMap is set to 'driving' travel mode`)
                            changeTravelModeByData(defaultTravelMode);
                            initDirections(lat, lng, defaultTravelMode);
                        }
                    });
                });
            }
        };
    </script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyABQoWn57RiF75Py7FX1DMMejMDiwlS558&callback=initMap">
    </script>

}